{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":28396,"status":"ok","timestamp":1725648911998,"user":{"displayName":"Sameer","userId":"14044075178244856672"},"user_tz":-300},"id":"zI6Br4z2oSYT","outputId":"c6d21933-e5d5-48c9-c0da-d663203db858"},"outputs":[{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_14\"</span>\n","</pre>\n"],"text/plain":["\u001b[1mModel: \"sequential_14\"\u001b[0m\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ conv2d_37 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">30</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_21 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv2d_38 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │          <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_22 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)            │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ flatten_14 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2304</span>)                │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_27 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │         <span style=\"color: #00af00; text-decoration-color: #00af00\">295,040</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dropout_22 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_28 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">1,290</span> │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","</pre>\n"],"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ conv2d_37 (\u001b[38;5;33mConv2D\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m30\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │             \u001b[38;5;34m320\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_21 (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m15\u001b[0m, \u001b[38;5;34m15\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ conv2d_38 (\u001b[38;5;33mConv2D\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │          \u001b[38;5;34m18,496\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ max_pooling2d_22 (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m6\u001b[0m, \u001b[38;5;34m6\u001b[0m, \u001b[38;5;34m64\u001b[0m)            │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ flatten_14 (\u001b[38;5;33mFlatten\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2304\u001b[0m)                │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_27 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │         \u001b[38;5;34m295,040\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dropout_22 (\u001b[38;5;33mDropout\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_28 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)                  │           \u001b[38;5;34m1,290\u001b[0m │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">315,146</span> (1.20 MB)\n","</pre>\n"],"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m315,146\u001b[0m (1.20 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">315,146</span> (1.20 MB)\n","</pre>\n"],"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m315,146\u001b[0m (1.20 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"],"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["None\n","Epoch 1/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2s/step - accuracy: 0.0600 - loss: 2.2996"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"name":"stdout","output_type":"stream","text":["\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2s/step - accuracy: 0.0600 - loss: 2.2996 - val_accuracy: 0.1364 - val_loss: 2.3045\n","Epoch 2/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 87ms/step - accuracy: 0.1316 - loss: 2.3157 - val_accuracy: 0.0909 - val_loss: 2.3004\n","Epoch 3/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.0000e+00 - loss: 0.0000e+00 - val_accuracy: 0.0909 - val_loss: 2.3004\n","Epoch 4/30\n"]},{"name":"stderr","output_type":"stream","text":["/usr/lib/python3.10/contextlib.py:153: UserWarning: Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches. You may need to use the `.repeat()` function when building your dataset.\n","  self.gen.throw(typ, value, traceback)\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 244ms/step - accuracy: 0.1842 - loss: 2.2468 - val_accuracy: 0.0455 - val_loss: 2.3042\n","Epoch 5/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 92ms/step - accuracy: 0.1000 - loss: 2.2946 - val_accuracy: 0.0455 - val_loss: 2.2945\n","Epoch 6/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 53ms/step - accuracy: 0.0000e+00 - loss: 0.0000e+00 - val_accuracy: 0.0455 - val_loss: 2.2945\n","Epoch 7/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 455ms/step - accuracy: 0.2000 - loss: 2.2503 - val_accuracy: 0.0455 - val_loss: 2.2943\n","Epoch 8/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 89ms/step - accuracy: 0.1579 - loss: 2.2381 - val_accuracy: 0.0455 - val_loss: 2.2851\n","Epoch 9/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.0000e+00 - loss: 0.0000e+00 - val_accuracy: 0.0455 - val_loss: 2.2851\n","Epoch 10/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 137ms/step - accuracy: 0.2632 - loss: 2.2235 - val_accuracy: 0.0455 - val_loss: 2.2835\n","Epoch 11/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 118ms/step - accuracy: 0.1600 - loss: 2.2436 - val_accuracy: 0.0455 - val_loss: 2.2642\n","Epoch 12/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 0.0000e+00 - loss: 0.0000e+00 - val_accuracy: 0.0455 - val_loss: 2.2642\n","Epoch 13/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 162ms/step - accuracy: 0.1400 - loss: 2.2203 - val_accuracy: 0.3636 - val_loss: 2.2306\n","Epoch 14/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 81ms/step - accuracy: 0.2368 - loss: 2.1856 - val_accuracy: 0.3636 - val_loss: 2.2032\n","Epoch 15/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step - accuracy: 0.0000e+00 - loss: 0.0000e+00 - val_accuracy: 0.3636 - val_loss: 2.2032\n","Epoch 16/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 254ms/step - accuracy: 0.2400 - loss: 2.1706 - val_accuracy: 0.3636 - val_loss: 2.1957\n","Epoch 17/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 134ms/step - accuracy: 0.2632 - loss: 2.1499 - val_accuracy: 0.4091 - val_loss: 2.1690\n","Epoch 18/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 66ms/step - accuracy: 0.0000e+00 - loss: 0.0000e+00 - val_accuracy: 0.4091 - val_loss: 2.1690\n","Epoch 19/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 272ms/step - accuracy: 0.2632 - loss: 2.1518 - val_accuracy: 0.4091 - val_loss: 2.1328\n","Epoch 20/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 173ms/step - accuracy: 0.2600 - loss: 2.1041 - val_accuracy: 0.3182 - val_loss: 2.1000\n","Epoch 21/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 64ms/step - accuracy: 0.0000e+00 - loss: 0.0000e+00 - val_accuracy: 0.3182 - val_loss: 2.1000\n","Epoch 22/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 231ms/step - accuracy: 0.1316 - loss: 2.1893 - val_accuracy: 0.3182 - val_loss: 2.0669\n","Epoch 23/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 162ms/step - accuracy: 0.2800 - loss: 2.1075 - val_accuracy: 0.3182 - val_loss: 2.0329\n","Epoch 24/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 81ms/step - accuracy: 0.0000e+00 - loss: 0.0000e+00 - val_accuracy: 0.3182 - val_loss: 2.0329\n","Epoch 25/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 263ms/step - accuracy: 0.3200 - loss: 2.0361 - val_accuracy: 0.3182 - val_loss: 1.9847\n","Epoch 26/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 150ms/step - accuracy: 0.1842 - loss: 2.0701 - val_accuracy: 0.3182 - val_loss: 1.9491\n","Epoch 27/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 66ms/step - accuracy: 0.0000e+00 - loss: 0.0000e+00 - val_accuracy: 0.3182 - val_loss: 1.9491\n","Epoch 28/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 240ms/step - accuracy: 0.3000 - loss: 2.0139 - val_accuracy: 0.3182 - val_loss: 1.9216\n","Epoch 29/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 145ms/step - accuracy: 0.2895 - loss: 1.9944 - val_accuracy: 0.4091 - val_loss: 1.8905\n","Epoch 30/30\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 65ms/step - accuracy: 0.0000e+00 - loss: 0.0000e+00 - val_accuracy: 0.4091 - val_loss: 1.8905\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 139ms/step\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       1.00      0.00      0.00         2\n","           1       1.00      0.00      0.00         2\n","           2       1.00      0.00      0.00         1\n","           3       1.00      0.00      0.00         3\n","           4       1.00      0.00      0.00         2\n","           5       0.20      1.00      0.33         2\n","           6       1.00      0.00      0.00         2\n","           7       1.00      0.17      0.29         6\n","           8       0.40      1.00      0.57         6\n","           9       1.00      1.00      1.00         2\n","\n","    accuracy                           0.39        28\n","   macro avg       0.86      0.32      0.22        28\n","weighted avg       0.81      0.39      0.28        28\n","\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1000x700 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["Accuracy: 0.39\n","Precision: 0.81\n","Recall: 0.39\n","F1 Score: 0.28\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 125ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 39ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 30ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 37ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 30ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 36ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 32ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 37ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 35ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 32ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 30ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 33ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 31ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 33ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 38ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 31ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 43ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 38ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 52ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 34ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 38ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 48ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 32ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 37ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 49ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 44ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 36ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 39ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 38ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 38ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 38ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 36ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 37ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 33ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 38ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 37ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 45ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 43ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 38ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 31ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 37ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n","Results saved to predictions.xlsx\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import cv2\n","import os\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, precision_score, recall_score, f1_score\n","\n","# Parameters\n","path = '/content/drive/MyDrive/Our_Ai_Project/TrainingSet'  # Directory with all the class folders\n","labelFile = 'labels.csv'  # File with all names of classes\n","batch_size_val = 50\n","steps_per_epoch_val = 2000\n","epochs_val = 30\n","imageDimensions = (32, 32, 3)\n","testRatio = 0.2\n","validationRatio = 0.2\n","testDir = '/content/drive/MyDrive/Our_Ai_Project/TestingSet'  # Directory with images to be tested\n","results_excel_path = \"predictions.xlsx\"  # File to save predictions\n","\n","# Load images and labels\n","def load_images_and_labels(data_dir):\n","    images = []\n","    labels = []\n","    class_names = os.listdir(data_dir)\n","    class_names.sort()  # Ensure consistent ordering\n","    class_map = {class_name: idx for idx, class_name in enumerate(class_names)}\n","\n","    for class_name, class_idx in class_map.items():\n","        folder_path = os.path.join(data_dir, class_name)\n","        if os.path.isdir(folder_path):\n","            for filename in os.listdir(folder_path):\n","                if filename.endswith('.jpg') or filename.endswith('.png'):\n","                    img_path = os.path.join(folder_path, filename)\n","                    img = cv2.imread(img_path)\n","                    img = cv2.resize(img, imageDimensions[:2])\n","                    images.append(img)\n","                    labels.append(class_idx)\n","\n","    images = np.array(images)\n","    labels = np.array(labels)\n","    return images, labels, class_names\n","\n","# Data preprocessing\n","def preprocess_img(img):\n","    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  # Convert to grayscale\n","    img = cv2.equalizeHist(img)  # Histogram equalization\n","    img = img / 255.0  # Normalize to [0, 1]\n","    return img\n","\n","# Data augmentation\n","def create_image_data_generator():\n","    return ImageDataGenerator(\n","        width_shift_range=0.1,\n","        height_shift_range=0.1,\n","        zoom_range=0.2,\n","        shear_range=0.1,\n","        rotation_range=10\n","    )\n","\n","# Model definition\n","def build_model(num_classes):\n","    model = Sequential([\n","        Conv2D(32, (3, 3), activation='relu', input_shape=(imageDimensions[0], imageDimensions[1], 1)),\n","        MaxPooling2D(pool_size=(2, 2)),\n","        Conv2D(64, (3, 3), activation='relu'),\n","        MaxPooling2D(pool_size=(2, 2)),\n","        Flatten(),\n","        Dense(128, activation='relu'),\n","        Dropout(0.5),\n","        Dense(num_classes, activation='softmax')\n","    ])\n","    model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])\n","    return model\n","\n","# Train the model\n","def train_model(model, X_train, y_train, X_validation, y_validation, batch_size, epochs):\n","    dataGen = create_image_data_generator()\n","    dataGen.fit(X_train)\n","\n","    history = model.fit(\n","        dataGen.flow(X_train, y_train, batch_size=batch_size),\n","        steps_per_epoch=len(X_train) // batch_size,\n","        epochs=epochs,\n","        validation_data=(X_validation, y_validation),\n","        shuffle=True\n","    )\n","\n","    return history\n","\n","# Evaluate the model\n","def evaluate_model(model, X_test, y_test):\n","    num_classes = len(np.unique(y_test))\n","    y_test_pred = model.predict(X_test)\n","    y_test_pred_classes = np.argmax(y_test_pred, axis=1)\n","    y_test_true_classes = np.argmax(y_test, axis=1) if y_test.ndim > 1 else y_test\n","\n","    # Compute confusion matrix\n","    cm = confusion_matrix(y_test_true_classes, y_test_pred_classes)\n","\n","    # Print classification report\n","    report = classification_report(y_test_true_classes, y_test_pred_classes, zero_division=1)\n","    print(\"Classification Report:\\n\", report)\n","\n","    # Plot confusion matrix\n","    plt.figure(figsize=(10, 7))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=range(num_classes), yticklabels=range(num_classes))\n","    plt.xlabel('Predicted Label')\n","    plt.ylabel('True Label')\n","    plt.title('Confusion Matrix')\n","    plt.show()\n","\n","    # Print evaluation metrics\n","    accuracy = accuracy_score(y_test_true_classes, y_test_pred_classes)\n","    precision = precision_score(y_test_true_classes, y_test_pred_classes, average='weighted', zero_division=1)\n","    recall = recall_score(y_test_true_classes, y_test_pred_classes, average='weighted', zero_division=1)\n","    f1 = f1_score(y_test_true_classes, y_test_pred_classes, average='weighted', zero_division=1)\n","\n","    print(f'Accuracy: {accuracy:.2f}')\n","    print(f'Precision: {precision:.2f}')\n","    print(f'Recall: {recall:.2f}')\n","    print(f'F1 Score: {f1:.2f}')\n","\n","# Predict and save results\n","def predict_and_save_to_excel(model, class_names, test_dir, results_excel_path):\n","    num_classes = len(class_names)\n","    results = []\n","\n","    for filename in os.listdir(test_dir):\n","        if filename.endswith('.jpg') or filename.endswith('.png'):\n","            img_path = os.path.join(test_dir, filename)\n","            img = cv2.imread(img_path)\n","            img = cv2.resize(img, imageDimensions[:2])\n","            img = preprocess_img(img)\n","            img = np.expand_dims(img, axis=0)  # Add batch dimension\n","            img = np.expand_dims(img, axis=-1)  # Add channel dimension\n","\n","            predictions = model.predict(img)\n","            predicted_class = np.argmax(predictions)\n","\n","            # Check if predicted class is within the valid range\n","            if predicted_class >= num_classes:\n","                print(f'Predicted class {predicted_class} is out of bounds.')\n","                predicted_class = 0  # Default to 0 if out of bounds\n","\n","            predicted_label = class_names[predicted_class]\n","            results.append([filename, predicted_label])\n","\n","    df = pd.DataFrame(results, columns=['Filename', 'Predicted Label'])\n","    df.to_excel(results_excel_path, index=False)\n","    print(f'Results saved to {results_excel_path}')\n","\n","# Main code execution\n","if __name__ == \"__main__\":\n","    images, labels, class_names = load_images_and_labels(path)\n","\n","    X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=testRatio)\n","    X_train, X_validation, y_train, y_validation = train_test_split(X_train, y_train, test_size=validationRatio)\n","\n","    # Preprocess images\n","    X_train = np.array([preprocess_img(img) for img in X_train])\n","    X_validation = np.array([preprocess_img(img) for img in X_validation])\n","    X_test = np.array([preprocess_img(img) for img in X_test])\n","\n","    # Reshape for the model\n","    X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], X_train.shape[2], 1)\n","    X_validation = X_validation.reshape(X_validation.shape[0], X_validation.shape[1], X_validation.shape[2], 1)\n","    X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], X_test.shape[2], 1)\n","\n","    # One-hot encode labels\n","    y_train = to_categorical(y_train, len(class_names))\n","    y_validation = to_categorical(y_validation, len(class_names))\n","    y_test = to_categorical(y_test, len(class_names))\n","\n","    # Build and train the model\n","    model = build_model(num_classes=len(class_names))\n","    print(model.summary())\n","    history = train_model(model, X_train, y_train, X_validation, y_validation, batch_size_val, epochs_val)\n","\n","    # Plot training history\n","    plt.figure()\n","    plt.plot(history.history['loss'])\n","    plt.plot(history.history['val_loss'])\n","    plt.legend(['Training Loss', 'Validation Loss'])\n","    plt.title('Loss')\n","    plt.xlabel('Epoch')\n","    plt.show()\n","\n","    plt.figure()\n","    plt.plot(history.history['accuracy'])\n","    plt.plot(history.history['val_accuracy'])\n","    plt.legend(['Training Accuracy', 'Validation Accuracy'])\n","    plt.title('Accuracy')\n","    plt.xlabel('Epoch')\n","    plt.show()\n","\n","    # Evaluate the model\n","    evaluate_model(model, X_test, y_test)\n","\n","    # Save the model\n","    model.save(\"model.keras\")\n","\n","    # Predict and save results to Excel\n","    predict_and_save_to_excel(model, class_names, testDir, results_excel_path)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UH_VauFqL9GA"},"outputs":[],"source":["import numpy as np\n","from PIL import UnidentifiedImageError\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout, Flatten\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.applications import VGG16\n","from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from sklearn.model_selection import train_test_split\n","import pandas as pd\n","import os\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, precision_score, recall_score, f1_score\n","\n","# Define paths\n","data_dir = '/content/drive/MyDrive/Our_Ai_Project/TrainingSet'\n","test_dir = '/content/drive/MyDrive/Our_Ai_Project/TestingSet'\n","results_excel_path = '/content/drive/MyDrive/Our_Ai_Project/results_final_10.xlsx'\n","\n","batch_size_val = 32\n","epochs_val = 50  # Increased number of epochs\n","imageDimensions = (224, 224, 3)  # Dimensions for VGG16\n","testRatio = 0.2\n","validationRatio = 0.2\n","\n","def load_images_and_labels(data_dir):\n","    images = []\n","    labels = []\n","    class_names = os.listdir(data_dir)\n","    class_names.sort()  # Ensure consistent ordering\n","    class_map = {class_name: idx for idx, class_name in enumerate(class_names)}\n","\n","    image_extensions = ['.jpg', '.png', '.jpeg', '.webp', '.bmp', '.tiff']\n","\n","    for class_name, class_idx in class_map.items():\n","        folder_path = os.path.join(data_dir, class_name)\n","        if os.path.isdir(folder_path):\n","            for filename in os.listdir(folder_path):\n","                if any(filename.lower().endswith(ext) for ext in image_extensions):\n","                    img_path = os.path.join(folder_path, filename)\n","                    try:\n","                        img = tf.keras.preprocessing.image.load_img(img_path, target_size=imageDimensions[:2])\n","                        img = tf.keras.preprocessing.image.img_to_array(img)\n","                        images.append(img)\n","                        labels.append(class_idx)\n","                    except (UnidentifiedImageError, IOError) as e:\n","                        print(f\"Warning: Could not load image {img_path}. Error: {e}\")\n","\n","    images = np.array(images)\n","    labels = np.array(labels)\n","    return images, labels, class_names\n","\n","# Model definition with Transfer Learning\n","def build_model(num_classes):\n","    base_model = VGG16(weights='imagenet', include_top=False, input_shape=(imageDimensions[0], imageDimensions[1], 3))\n","    base_model.trainable = True\n","\n","    # Freeze all layers except the top layers\n","    for layer in base_model.layers[:-4]:\n","        layer.trainable = False\n","\n","    model = Sequential([\n","        base_model,\n","        Flatten(),\n","        Dense(512, activation='relu'),\n","        Dropout(0.5),\n","        Dense(num_classes, activation='softmax')\n","    ])\n","\n","    model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])\n","    return model\n","\n","# Train the model with data augmentation\n","def train_model(model, X_train, y_train, X_validation, y_validation, batch_size, epochs):\n","    # Data Augmentation\n","    datagen = ImageDataGenerator(\n","        rescale=1.0/255,\n","        rotation_range=20,\n","        width_shift_range=0.2,\n","        height_shift_range=0.2,\n","        shear_range=0.2,\n","        zoom_range=0.2,\n","        horizontal_flip=True,\n","        fill_mode='nearest'\n","    )\n","\n","    # Early stopping and learning rate reduction\n","    early_stopping = EarlyStopping(monitor='val_accuracy', patience=10, restore_best_weights=True)\n","    lr_reduction = ReduceLROnPlateau(monitor='val_accuracy', factor=0.1, patience=5, min_lr=1e-6)\n","\n","    history = model.fit(\n","        datagen.flow(X_train, y_train, batch_size=batch_size),\n","        epochs=epochs,\n","        validation_data=(X_validation, y_validation),\n","        callbacks=[early_stopping, lr_reduction]\n","    )\n","\n","    return history\n","\n","def predict_and_save_to_excel(model, class_names):\n","    num_classes = len(class_names)\n","    results = []\n","\n","    image_extensions = ('.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff')  # Add other extensions here\n","\n","    for filename in os.listdir(test_dir):\n","        if filename.lower().endswith(image_extensions):  # Convert to lowercase to handle uppercase extensions\n","            img_path = os.path.join(test_dir, filename)\n","            img = tf.keras.preprocessing.image.load_img(img_path, target_size=imageDimensions[:2])\n","            img = tf.keras.preprocessing.image.img_to_array(img)\n","            img = np.expand_dims(img, axis=0)  # Add batch dimension\n","            img = img / 255.0  # Normalize the image\n","\n","            predictions = model.predict(img)\n","            predicted_class = np.argmax(predictions)\n","\n","            predicted_label = class_names[predicted_class]\n","            results.append([filename, predicted_label])\n","\n","    df = pd.DataFrame(results, columns=['Filename', 'Predicted Label'])\n","    df.to_excel(results_excel_path, index=False)\n","    print(f'Results saved to {results_excel_path}')\n","\n","\n","# Evaluate the model\n","def evaluate_model(model, X_test, y_test):\n","    num_classes = len(np.unique(y_test))\n","    y_test_pred = model.predict(X_test)\n","    y_test_pred_classes = np.argmax(y_test_pred, axis=1)\n","    y_test_true_classes = np.argmax(y_test, axis=1) if y_test.ndim > 1 else y_test\n","\n","    # Compute confusion matrix\n","    cm = confusion_matrix(y_test_true_classes, y_test_pred_classes)\n","\n","    # Print classification report\n","    report = classification_report(y_test_true_classes, y_test_pred_classes, zero_division=1)\n","    print(\"Classification Report:\\n\", report)\n","\n","    # Plot confusion matrix\n","    plt.figure(figsize=(10, 7))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=range(num_classes), yticklabels=range(num_classes))\n","    plt.xlabel('Predicted Label')\n","    plt.ylabel('True Label')\n","    plt.title('Confusion Matrix')\n","    plt.show()\n","\n","    # Print evaluation metrics\n","    accuracy = accuracy_score(y_test_true_classes, y_test_pred_classes)\n","    precision = precision_score(y_test_true_classes, y_test_pred_classes, average='weighted', zero_division=1)\n","    recall = recall_score(y_test_true_classes, y_test_pred_classes, average='weighted', zero_division=1)\n","    f1 = f1_score(y_test_true_classes, y_test_pred_classes, average='weighted', zero_division=1)\n","\n","    print(f'Accuracy: {accuracy:.2f}')\n","    print(f'Precision: {precision:.2f}')\n","    print(f'Recall: {recall:.2f}')\n","    print(f'F1 Score: {f1:.2f}')\n","\n","# Main code execution\n","if __name__ == \"__main__\":\n","    # Load images and labels\n","    images, labels, class_names = load_images_and_labels(data_dir)\n","    X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=testRatio, stratify=labels)\n","    X_train, X_validation, y_train, y_validation = train_test_split(X_train, y_train, test_size=validationRatio, stratify=y_train)\n","\n","    # One-hot encode labels\n","    y_train = to_categorical(y_train, len(class_names))\n","    y_validation = to_categorical(y_validation, len(class_names))\n","    y_test = to_categorical(y_test, len(class_names))\n","\n","    # Build and train the model\n","    model = build_model(num_classes=len(class_names))\n","    print(\"Model Summary:\")\n","    try:\n","        model.summary()\n","    except Exception as e:\n","        print(f\"Error in model summary: {e}\")\n","\n","    history = train_model(model, X_train, y_train, X_validation, y_validation, batch_size=batch_size_val, epochs=epochs_val)\n","\n","    # Plot training history\n","    plt.figure()\n","    plt.plot(history.history['loss'])\n","    plt.plot(history.history['val_loss'])\n","    plt.legend(['Training Loss', 'Validation Loss'])\n","    plt.title('Loss')\n","    plt.xlabel('Epoch')\n","    plt.show()\n","\n","    plt.figure()\n","    plt.plot(history.history['accuracy'])\n","    plt.plot(history.history['val_accuracy'])\n","    plt.legend(['Training Accuracy', 'Validation Accuracy'])\n","    plt.title('Accuracy')\n","    plt.xlabel('Epoch')\n","    plt.show()\n","\n","    # Evaluate the model\n","    evaluate_model(model, X_test, y_test)\n","\n","    # Save the model\n","    model.save(\"model.keras\")\n","\n","    # Predict and save results to Excel\n","    predict_and_save_to_excel(model, class_names)\n"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"sXPY_6Lf92W4","executionInfo":{"status":"ok","timestamp":1726040942544,"user_tz":-300,"elapsed":26659,"user":{"displayName":"Sameer","userId":"14044075178244856672"}},"outputId":"cbdc13a8-4ca2-486a-a43c-5986a3a46ce1"},"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Warning: Could not load image /content/drive/MyDrive/Our_Ai_Project/TrainingSet/30/3.jpg. Error: cannot identify image file <_io.BytesIO object at 0x7c6f2a324270>\n","Warning: Could not load image /content/drive/MyDrive/Our_Ai_Project/TrainingSet/30/7.jpg. Error: cannot identify image file <_io.BytesIO object at 0x7c6f2a201260>\n","Warning: Could not load image /content/drive/MyDrive/Our_Ai_Project/TrainingSet/70/6.jpg. Error: cannot identify image file <_io.BytesIO object at 0x7c6f2a2013f0>\n","Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m58889256/58889256\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","Model Summary:\n","Error in model summary: Undefined shapes are not supported.\n","Epoch 1/50\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m263s\u001b[0m 29s/step - accuracy: 0.0622 - loss: 3.5753 - val_accuracy: 0.0448 - val_loss: 9.8604 - learning_rate: 1.0000e-04\n","Epoch 2/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m298s\u001b[0m 33s/step - accuracy: 0.0946 - loss: 3.0998 - val_accuracy: 0.1194 - val_loss: 23.8319 - learning_rate: 1.0000e-04\n","Epoch 3/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m279s\u001b[0m 28s/step - accuracy: 0.1245 - loss: 2.7854 - val_accuracy: 0.1642 - val_loss: 36.4103 - learning_rate: 1.0000e-04\n","Epoch 4/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m270s\u001b[0m 29s/step - accuracy: 0.2177 - loss: 2.4345 - val_accuracy: 0.1642 - val_loss: 47.9176 - learning_rate: 1.0000e-04\n","Epoch 5/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m252s\u001b[0m 28s/step - accuracy: 0.3152 - loss: 2.0088 - val_accuracy: 0.2239 - val_loss: 51.1549 - learning_rate: 1.0000e-04\n","Epoch 6/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m255s\u001b[0m 28s/step - accuracy: 0.3768 - loss: 1.8966 - val_accuracy: 0.2388 - val_loss: 51.0162 - learning_rate: 1.0000e-04\n","Epoch 7/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m253s\u001b[0m 28s/step - accuracy: 0.4388 - loss: 1.5301 - val_accuracy: 0.2537 - val_loss: 49.0585 - learning_rate: 1.0000e-04\n","Epoch 8/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m293s\u001b[0m 33s/step - accuracy: 0.4424 - loss: 1.5584 - val_accuracy: 0.2687 - val_loss: 47.2014 - learning_rate: 1.0000e-04\n","Epoch 9/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m285s\u001b[0m 28s/step - accuracy: 0.5081 - loss: 1.3220 - val_accuracy: 0.3284 - val_loss: 76.7990 - learning_rate: 1.0000e-04\n","Epoch 10/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m252s\u001b[0m 28s/step - accuracy: 0.6135 - loss: 1.2411 - val_accuracy: 0.2985 - val_loss: 74.1898 - learning_rate: 1.0000e-04\n","Epoch 11/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m256s\u001b[0m 29s/step - accuracy: 0.5902 - loss: 1.1233 - val_accuracy: 0.2985 - val_loss: 70.5181 - learning_rate: 1.0000e-04\n","Epoch 12/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m297s\u001b[0m 33s/step - accuracy: 0.5985 - loss: 1.0695 - val_accuracy: 0.2687 - val_loss: 88.1992 - learning_rate: 1.0000e-04\n","Epoch 13/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m254s\u001b[0m 28s/step - accuracy: 0.6731 - loss: 0.9016 - val_accuracy: 0.2985 - val_loss: 77.4610 - learning_rate: 1.0000e-04\n","Epoch 14/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m258s\u001b[0m 29s/step - accuracy: 0.6160 - loss: 0.9769 - val_accuracy: 0.3284 - val_loss: 68.0969 - learning_rate: 1.0000e-04\n","Epoch 15/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m257s\u001b[0m 28s/step - accuracy: 0.7170 - loss: 0.8213 - val_accuracy: 0.3433 - val_loss: 68.2372 - learning_rate: 1.0000e-05\n","Epoch 16/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m253s\u001b[0m 28s/step - accuracy: 0.7896 - loss: 0.6683 - val_accuracy: 0.3433 - val_loss: 70.9448 - learning_rate: 1.0000e-05\n","Epoch 17/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m249s\u001b[0m 28s/step - accuracy: 0.7069 - loss: 0.7902 - val_accuracy: 0.3582 - val_loss: 75.0841 - learning_rate: 1.0000e-05\n","Epoch 18/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m269s\u001b[0m 28s/step - accuracy: 0.7337 - loss: 0.7090 - val_accuracy: 0.3582 - val_loss: 77.7631 - learning_rate: 1.0000e-05\n","Epoch 19/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m250s\u001b[0m 28s/step - accuracy: 0.7255 - loss: 0.6684 - val_accuracy: 0.3433 - val_loss: 79.3751 - learning_rate: 1.0000e-05\n","Epoch 20/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m264s\u001b[0m 28s/step - accuracy: 0.7817 - loss: 0.5880 - val_accuracy: 0.3433 - val_loss: 81.9079 - learning_rate: 1.0000e-05\n","Epoch 21/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m263s\u001b[0m 30s/step - accuracy: 0.8177 - loss: 0.5926 - val_accuracy: 0.3284 - val_loss: 84.3569 - learning_rate: 1.0000e-05\n","Epoch 22/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m248s\u001b[0m 28s/step - accuracy: 0.7831 - loss: 0.6952 - val_accuracy: 0.3433 - val_loss: 85.9181 - learning_rate: 1.0000e-05\n","Epoch 23/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m251s\u001b[0m 28s/step - accuracy: 0.7654 - loss: 0.6689 - val_accuracy: 0.3433 - val_loss: 85.8847 - learning_rate: 1.0000e-06\n","Epoch 24/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m251s\u001b[0m 28s/step - accuracy: 0.7626 - loss: 0.6338 - val_accuracy: 0.3433 - val_loss: 85.8325 - learning_rate: 1.0000e-06\n","Epoch 25/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m264s\u001b[0m 28s/step - accuracy: 0.7591 - loss: 0.5954 - val_accuracy: 0.3433 - val_loss: 85.7092 - learning_rate: 1.0000e-06\n","Epoch 26/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m254s\u001b[0m 28s/step - accuracy: 0.7393 - loss: 0.6850 - val_accuracy: 0.3433 - val_loss: 85.5609 - learning_rate: 1.0000e-06\n","Epoch 27/50\n","\u001b[1m9/9\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m253s\u001b[0m 28s/step - accuracy: 0.7417 - loss: 0.7150 - val_accuracy: 0.3433 - val_loss: 85.3225 - learning_rate: 1.0000e-06\n"]},{"data":{"image/png":"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Yt68ed7tx7ZIzJo1i8TERObPn096ejqxsbEMHDiwTFgqLi7mtttuIzExkbp163LvvfcycuRIhg4dWunP4+DBg1x//fXUqVOH6OhoBg0axNatW73bd+zYweDBg6lTpw4xMTG0b9+ezz77zPvcESNGUL9+faKiomjVqhUzZ86sdC1B4ffV8EgKLJxmdyUiIkAtCB+WZZFXWGzLzbKsansf9913H//4xz/YtGkTnTp1Iicnh4svvpiFCxfy448/MnDgQAYPHkxGRsYpX2fatGkMHz6cdevWcfHFFzNixAgOHDhw0v3z8vJ48skn+d///V++/fZbMjIyuOuuu7zbH3vsMd566y1mzpzJkiVLyM7O5sMPP6zSex01ahSrVq1i3rx5LF26FMuyuPjii71DW8eNG0dBQQHffvst69ev57HHHvO2Dk2ePJmNGzfy+eefs2nTJl588UXq1atXpXpqvfVzwHLBshch7+TfBRERXwn40y5Hily0e3C+Lcfe+NAAosOr5yN86KGHuPDCC72Pk5KS6Ny5s/fx3//+d+bOncu8efMYP378SV9n1KhRXHPNNQA8+uijPPPMM6xYsYKBAweecP+ioiJeeuklWrRoAcD48eN56KGHvNufffZZJk2axGWXXQbAc889522FqIytW7cyb948lixZwtlnnw3AW2+9RVpaGh9++CFXXnklGRkZDBs2jI4dOwLQvHlz7/MzMjI488wz6d69O2Baf+Q0tn9r7ovz4cd/Q5/b7K1HRIJewLd81BaeH1OPnJwc7rrrLtLT00lMTCQ2NpZNmzadtuWjU6dO3uWYmBji4+O904WfSHR0tDd4gJlS3LN/VlYWe/bsoWfPnt7tTqeTbt26Vei9lbZp0yZCQ0Pp1auXd13dunVp06YNmzZtAuC2227j4Ycfpk+fPkyZMoV169Z5973llluYPXs2Xbp04Z577uGHH36odC1BIXcf7P356OOVr4HbZV89IiLUgpaPqDAnGx8aYNuxq0tMTEyZx3fddRcLFizgySefpGXLlkRFRXHFFVdQWFh4ytcJCwsr89jhcOB2uyu0f3WeTqqMm266iQEDBvDpp5/y5ZdfMn36dJ566ikmTJjAoEGD2LFjB5999hkLFiygX79+jBs3jieffNLWmv3Wb9+Z+7otTRA5tAO2LoA2J24JExHxhYBv+XA4HESHh9pyq8mZ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\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m52s\u001b[0m 16s/step\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       1.00      0.20      0.33         5\n","           1       0.67      1.00      0.80         2\n","           2       1.00      0.25      0.40         4\n","           3       0.00      0.00      1.00         4\n","           4       0.33      0.80      0.47         5\n","           5       0.00      0.00      1.00         5\n","           6       0.14      0.20      0.17         5\n","           7       1.00      0.00      0.00         5\n","           8       1.00      1.00      1.00         2\n","           9       0.50      0.50      0.50         2\n","          10       0.50      1.00      0.67         1\n","          11       0.43      0.75      0.55         4\n","          12       0.50      0.50      0.50         2\n","          13       0.33      0.50      0.40         2\n","          14       1.00      0.33      0.50         3\n","          15       0.67      0.67      0.67         3\n","          16       0.33      0.33      0.33         3\n","          17       1.00      1.00      1.00         2\n","          18       0.00      0.00      1.00         4\n","          19       0.33      0.50      0.40         2\n","          20       0.14      0.33      0.20         3\n","          21       0.75      1.00      0.86         3\n","          22       1.00      0.50      0.67         2\n","          23       1.00      0.00      0.00         4\n","          24       0.25      0.25      0.25         4\n","          25       0.12      0.33      0.18         3\n","\n","    accuracy                           0.38        84\n","   macro avg       0.54      0.46      0.53        84\n","weighted avg       0.52      0.38      0.50        84\n","\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1000x700 with 2 Axes>"]},"metadata":{},"output_type":"display_data"},{"output_type":"stream","name":"stdout","text":["Accuracy: 0.38\n","Precision: 0.52\n","Recall: 0.38\n","F1 Score: 0.50\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 568ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 545ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 536ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 943ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 615ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 545ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 657ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 538ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 536ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 557ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 542ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 562ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 550ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 547ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 572ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 540ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 725ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 973ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 909ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 979ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 986ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 940ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 633ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 535ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 554ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 535ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 539ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 549ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 538ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 554ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 540ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 548ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 555ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 544ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 560ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 558ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 547ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 547ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 798ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 990ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 979ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 902ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 997ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 966ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 596ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 554ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 541ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 551ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 572ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 543ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 553ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 542ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 551ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 553ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 543ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 552ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 545ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 563ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 552ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 541ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 814ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 972ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 946ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 963ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step   \n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 873ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 714ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 538ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 564ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 548ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 542ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 565ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 546ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 557ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 587ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 554ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 573ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 549ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 555ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 560ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 553ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 562ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 855ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 975ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 998ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 917ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 918ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 542ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 570ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 558ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 555ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 917ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 933ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 905ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 889ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 550ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 600ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 961ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 878ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 954ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 925ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 561ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 542ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 558ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 571ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 527ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 560ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 549ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 564ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 581ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 546ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 564ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 545ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 546ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 566ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 541ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 607ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 957ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 872ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 947ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 887ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 664ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 551ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 564ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 547ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 564ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 535ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 551ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 564ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 544ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 583ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 642ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 548ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 564ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 534ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 560ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 578ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 944ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 942ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 856ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 847ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 548ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 552ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 551ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 562ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 555ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 549ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 546ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 557ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 562ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 555ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 550ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 559ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 532ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 579ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 552ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 686ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 974ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 965ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 984ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 909ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 539ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 563ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 537ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 554ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 548ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 558ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 590ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 553ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 547ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 562ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 538ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 549ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 545ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 556ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 552ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 668ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step   \n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 932ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 990ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 995ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 735ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 578ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 548ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 549ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 579ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 547ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 554ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 554ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 535ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 577ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 558ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 562ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 558ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 550ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 562ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 638ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 976ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 944ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1000ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 984ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 984ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 542ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 571ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 540ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 562ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 572ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 539ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 565ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 534ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 567ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 559ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 547ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 558ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 591ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 538ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 572ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 671ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 963ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 961ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 598ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 565ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 536ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 560ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 562ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 540ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 587ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 551ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 539ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 589ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 536ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 563ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 558ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 559ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 567ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 554ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 939ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 952ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step   \n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 934ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 936ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 567ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 560ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 555ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 569ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 547ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 548ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 565ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 547ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 565ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 549ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 559ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 565ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 540ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 573ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 549ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 573ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 968ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 903ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 969ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 960ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 815ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 591ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 559ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 548ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 580ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 548ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 545ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 547ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 566ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 555ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 560ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 560ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 557ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 564ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 558ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 553ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 743ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 982ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 949ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 940ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 531ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 570ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 544ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 547ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 549ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 550ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 555ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 556ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 562ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 566ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 544ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 556ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 544ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 568ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 557ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 857ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 921ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 903ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 937ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 984ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 989ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 610ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 590ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 535ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 543ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 561ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 545ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 565ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 547ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 557ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 564ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 563ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 549ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 567ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 550ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 564ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 581ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 929ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 923ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 993ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 994ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 909ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 543ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 574ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 536ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 558ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 553ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 549ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 567ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 535ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 559ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 563ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 529ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 565ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 576ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 538ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 614ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 784ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 983ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 968ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 972ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 992ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 839ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 546ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 552ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 548ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 562ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 547ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 562ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 561ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 539ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 579ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 551ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 566ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 569ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 533ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 540ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 567ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 657ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 976ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 966ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step   \n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1s/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 787ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 546ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 567ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 536ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 561ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 603ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 547ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 554ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 546ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 555ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 567ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 545ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 578ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 592ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 541ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 558ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 952ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 987ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 951ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 991ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 975ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 636ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 535ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 562ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 560ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 553ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 557ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 541ms/step\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 542ms/step\n","Results saved to /content/drive/MyDrive/Our_Ai_Project/results_final_pics.xlsx\n"]}],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":339},"executionInfo":{"elapsed":1482,"status":"error","timestamp":1726033290975,"user":{"displayName":"Sameer","userId":"14044075178244856672"},"user_tz":-300},"id":"97WHZEghmSbY","outputId":"b2ffbdb3-c2e3-4de7-8748-b1c07699e7aa"},"outputs":[{"ename":"KeyboardInterrupt","evalue":"","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-67bc066034a1>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mPIL\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mImage\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mPILImage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mUnidentifiedImageError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mtensorflow\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mSequential\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDense\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mDropout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mFlatten\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;31m# Do not remove this line; See https://github.com/tensorflow/tensorflow/issues/42596\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpywrap_tensorflow\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0m_pywrap_tensorflow\u001b[0m  \u001b[0;31m# pylint: disable=unused-import\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtools\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmodule_util\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0m_module_util\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlazy_loader\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mKerasLazyLoader\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0m_KerasLazyLoader\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/pywrap_tensorflow.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;31m# Perform pre-load sanity checks in order to produce a more actionable error.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 34\u001b[0;31m \u001b[0mself_check\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreload_check\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     35\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m \u001b[0;31m# pylint: disable=wildcard-import,g-import-not-at-top,unused-import,line-too-long\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/platform/self_check.py\u001b[0m in \u001b[0;36mpreload_check\u001b[0;34m()\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;31m# incompatibilities before we trigger them (which would typically result in\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;31m# SIGILL).\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m     \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplatform\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0m_pywrap_cpu_feature_guard\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m     \u001b[0m_pywrap_cpu_feature_guard\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInfoAboutUnusedCPUFeatures\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["import numpy as np\n","from PIL import Image as PILImage, UnidentifiedImageError\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout, Flatten\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.applications import VGG16\n","from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from sklearn.model_selection import train_test_split\n","import pandas as pd\n","import os\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, precision_score, recall_score, f1_score\n","from openpyxl import Workbook\n","from openpyxl.drawing.image import Image as OpenpyxlImage\n","\n","# Define paths\n","data_dir = '/content/drive/MyDrive/Our_Ai_Project/TrainingSet'\n","test_dir = '/content/drive/MyDrive/Our_Ai_Project/TestingSet'\n","results_excel_path = '/content/drive/MyDrive/Our_Ai_Project/results_final_10.xlsx'\n","temp_images_dir = '/content/drive/MyDrive/Our_Ai_Project/temp_images/'  # Temporary directory for images\n","\n","batch_size_val = 32\n","epochs_val = 50  # Increased number of epochs\n","imageDimensions = (224, 224, 3)  # Dimensions for VGG16\n","testRatio = 0.2\n","validationRatio = 0.2\n","\n","def load_images_and_labels(data_dir):\n","    images = []\n","    labels = []\n","    class_names = os.listdir(data_dir)\n","    class_names.sort()  # Ensure consistent ordering\n","    class_map = {class_name: idx for idx, class_name in enumerate(class_names)}\n","\n","    image_extensions = ['.jpg', '.png', '.jpeg', '.webp', '.bmp', '.tiff']\n","\n","    for class_name, class_idx in class_map.items():\n","        folder_path = os.path.join(data_dir, class_name)\n","        if os.path.isdir(folder_path):\n","            for filename in os.listdir(folder_path):\n","                if any(filename.lower().endswith(ext) for ext in image_extensions):\n","                    img_path = os.path.join(folder_path, filename)\n","                    try:\n","                        img = tf.keras.preprocessing.image.load_img(img_path, target_size=imageDimensions[:2])\n","                        img = tf.keras.preprocessing.image.img_to_array(img)\n","                        images.append(img)\n","                        labels.append(class_idx)\n","                    except (UnidentifiedImageError, IOError) as e:\n","                        print(f\"Warning: Could not load image {img_path}. Error: {e}\")\n","\n","    images = np.array(images)\n","    labels = np.array(labels)\n","    return images, labels, class_names\n","\n","# Model definition with Transfer Learning\n","def build_model(num_classes):\n","    base_model = VGG16(weights='imagenet', include_top=False, input_shape=(imageDimensions[0], imageDimensions[1], 3))\n","    base_model.trainable = True\n","\n","    # Freeze all layers except the top layers\n","    for layer in base_model.layers[:-4]:\n","        layer.trainable = False\n","\n","    model = Sequential([\n","        base_model,\n","        Flatten(),\n","        Dense(512, activation='relu'),\n","        Dropout(0.5),\n","        Dense(num_classes, activation='softmax')\n","    ])\n","\n","    model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])\n","    return model\n","\n","# Train the model with data augmentation\n","def train_model(model, X_train, y_train, X_validation, y_validation, batch_size, epochs):\n","    # Data Augmentation\n","    datagen = ImageDataGenerator(\n","        rescale=1.0/255,\n","        rotation_range=20,\n","        width_shift_range=0.2,\n","        height_shift_range=0.2,\n","        shear_range=0.2,\n","        zoom_range=0.2,\n","        horizontal_flip=True,\n","        fill_mode='nearest'\n","    )\n","\n","    # Early stopping and learning rate reduction\n","    early_stopping = EarlyStopping(monitor='val_accuracy', patience=10, restore_best_weights=True)\n","    lr_reduction = ReduceLROnPlateau(monitor='val_accuracy', factor=0.1, patience=5, min_lr=1e-6)\n","\n","    history = model.fit(\n","        datagen.flow(X_train, y_train, batch_size=batch_size),\n","        epochs=epochs,\n","        validation_data=(X_validation, y_validation),\n","        callbacks=[early_stopping, lr_reduction]\n","    )\n","\n","    return history\n","\n","def predict_and_save_to_excel(model, class_names):\n","    num_classes = len(class_names)\n","    results = []\n","\n","    # Create the temporary images directory if it doesn't exist\n","    if not os.path.exists(temp_images_dir):\n","        os.makedirs(temp_images_dir)\n","\n","    image_extensions = ('.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff')  # Add other extensions here\n","\n","    for filename in os.listdir(test_dir):\n","        if filename.lower().endswith(image_extensions):  # Convert to lowercase to handle uppercase extensions\n","            img_path = os.path.join(test_dir, filename)\n","            img = tf.keras.preprocessing.image.load_img(img_path, target_size=imageDimensions[:2])\n","            img_array = tf.keras.preprocessing.image.img_to_array(img)\n","            img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension\n","            img_array = img_array / 255.0  # Normalize the image\n","\n","            predictions = model.predict(img_array)\n","            predicted_class = np.argmax(predictions)\n","\n","            predicted_label = class_names[predicted_class]\n","\n","            # Save image to temp directory\n","            temp_img_path = os.path.join(temp_images_dir, filename)\n","            PILImage.fromarray((img_array[0] * 255).astype(np.uint8)).save(temp_img_path)\n","\n","            results.append([filename, predicted_label, temp_img_path])\n","\n","    # Create Excel file with images\n","    wb = Workbook()\n","    ws = wb.active\n","    ws.title = \"Predictions\"\n","\n","    # Write headers\n","    ws.append(['Filename', 'Predicted Label', 'Image'])\n","\n","    for result in results:\n","        filename, label, img_path = result\n","        # Add image to Excel\n","        img = OpenpyxlImage(img_path)\n","        img.width = 100\n","        img.height = 100\n","        ws.append([filename, label])\n","        cell = ws.cell(row=ws.max_row, column=3)\n","        ws.add_image(img, cell.coordinate)\n","\n","    wb.save(results_excel_path)\n","    print(f'Results saved to {results_excel_path}')\n","\n","# Evaluate the model\n","def evaluate_model(model, X_test, y_test):\n","    num_classes = len(np.unique(y_test))\n","    y_test_pred = model.predict(X_test)\n","    y_test_pred_classes = np.argmax(y_test_pred, axis=1)\n","    y_test_true_classes = np.argmax(y_test, axis=1) if y_test.ndim > 1 else y_test\n","\n","    # Compute confusion matrix\n","    cm = confusion_matrix(y_test_true_classes, y_test_pred_classes)\n","\n","    # Print classification report\n","    report = classification_report(y_test_true_classes, y_test_pred_classes, zero_division=1)\n","    print(\"Classification Report:\\n\", report)\n","\n","    # Plot confusion matrix\n","    plt.figure(figsize=(10, 7))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=range(num_classes), yticklabels=range(num_classes))\n","    plt.xlabel('Predicted Label')\n","    plt.ylabel('True Label')\n","    plt.title('Confusion Matrix')\n","    plt.show()\n","\n","    # Print evaluation metrics\n","    accuracy = accuracy_score(y_test_true_classes, y_test_pred_classes)\n","    precision = precision_score(y_test_true_classes, y_test_pred_classes, average='weighted', zero_division=1)\n","    recall = recall_score(y_test_true_classes, y_test_pred_classes, average='weighted', zero_division=1)\n","    f1 = f1_score(y_test_true_classes, y_test_pred_classes, average='weighted', zero_division=1)\n","\n","    print(f'Accuracy: {accuracy:.2f}')\n","    print(f'Precision: {precision:.2f}')\n","    print(f'Recall: {recall:.2f}')\n","    print(f'F1 Score: {f1:.2f}')\n","\n","# Main code execution\n","if __name__ == \"__main__\":\n","    # Load images and labels\n","    images, labels, class_names = load_images_and_labels(data_dir)\n","    X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=testRatio, stratify=labels)\n","    X_train, X_validation, y_train, y_validation = train_test_split(X_train, y_train, test_size=validationRatio, stratify=y_train)\n","\n","    # One-hot encode labels\n","    y_train = to_categorical(y_train, len(class_names))\n","    y_validation = to_categorical(y_validation, len(class_names))\n","    y_test = to_categorical(y_test, len(class_names))\n","\n","    # Build and train the model\n","    model = build_model(num_classes=len(class_names))\n","    print(\"Model Summary:\")\n","    try:\n","        model.summary()\n","    except Exception as e:\n","        print(f\"Error in model summary: {e}\")\n","\n","    history = train_model(model, X_train, y_train, X_validation, y_validation, batch_size=batch_size_val, epochs=epochs_val)\n","\n","    # Plot training history\n","    plt.figure()\n","    plt.plot(history.history['loss'])\n","    plt.plot(history.history['val_loss'])\n","    plt.legend(['Training Loss', 'Validation Loss'])\n","    plt.title('Loss')\n","    plt.xlabel('Epoch')\n","    plt.show()\n","\n","    plt.figure()\n","    plt.plot(history.history['accuracy'])\n","    plt.plot(history.history['val_accuracy'])\n","    plt.legend(['Training Accuracy', 'Validation Accuracy'])\n","    plt.title('Accuracy')\n","    plt.xlabel('Epoch')\n","    plt.show()\n","\n","    # Evaluate the model\n","    evaluate_model(model, X_test, y_test)\n","\n","    # Save the model\n","    model.save(\"model.keras\")\n","\n","    # Predict and save results to Excel\n","    predict_and_save_to_excel(model, class_names)\n"]},{"cell_type":"code","source":["# import numpy as np\n","# from PIL import UnidentifiedImageError\n","# import matplotlib.pyplot as plt\n","# import tensorflow as tf\n","# from tensorflow.keras.models import Sequential\n","# from tensorflow.keras.layers import Dense, Dropout, Flatten\n","# from tensorflow.keras.optimizers import Adam\n","# from tensorflow.keras.utils import to_categorical\n","# from tensorflow.keras.applications import VGG16\n","# from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","# from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","# from sklearn.model_selection import train_test_split\n","# import pandas as pd\n","# import os\n","# import seaborn as sns\n","# from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, precision_score, recall_score, f1_score\n","\n","# # Define paths\n","# data_dir = '/content/drive/MyDrive/Our_Ai_Project/TrainingSet'\n","# test_dir = '/content/drive/MyDrive/Our_Ai_Project/TestingSet'\n","# results_excel_path = '/content/drive/MyDrive/Our_Ai_Project/results_final_10_A.xlsx'\n","\n","# batch_size_val = 32\n","# epochs_val = 50  # Increased number of epochs\n","# imageDimensions = (224, 224, 3)  # Dimensions for VGG16\n","# testRatio = 0.2\n","# validationRatio = 0.2\n","\n","# def load_images_and_labels(data_dir):\n","#     images = []\n","#     labels = []\n","#     class_names = os.listdir(data_dir)\n","#     class_names.sort()  # Ensure consistent ordering\n","#     class_map = {class_name: idx for idx, class_name in enumerate(class_names)}\n","\n","#     image_extensions = ['.jpg', '.png', '.jpeg', '.webp', '.bmp', '.tiff']\n","\n","#     for class_name, class_idx in class_map.items():\n","#         folder_path = os.path.join(data_dir, class_name)\n","#         if os.path.isdir(folder_path):\n","#             for filename in os.listdir(folder_path):\n","#                 if any(filename.lower().endswith(ext) for ext in image_extensions):\n","#                     img_path = os.path.join(folder_path, filename)\n","#                     try:\n","#                         img = tf.keras.preprocessing.image.load_img(img_path, target_size=imageDimensions[:2])\n","#                         img = tf.keras.preprocessing.image.img_to_array(img)\n","#                         images.append(img)\n","#                         labels.append(class_idx)\n","#                     except (UnidentifiedImageError, IOError) as e:\n","#                         print(f\"Warning: Could not load image {img_path}. Error: {e}\")\n","\n","#     images = np.array(images)\n","#     labels = np.array(labels)\n","#     return images, labels, class_names\n","\n","# # Model definition with Transfer Learning\n","# def build_model(num_classes):\n","#     base_model = VGG16(weights='imagenet', include_top=False, input_shape=(imageDimensions[0], imageDimensions[1], 3))\n","\n","#     # Unfreeze more layers for fine-tuning\n","#     for layer in base_model.layers[:-4]:\n","#         layer.trainable = True\n","\n","#     model = Sequential([\n","#         base_model,\n","#         Flatten(),\n","#         Dense(512, activation='relu'),\n","#         Dropout(0.5),\n","#         Dense(num_classes, activation='softmax')\n","#     ])\n","\n","#     # Reduced learning rate\n","#     model.compile(optimizer=Adam(learning_rate=0.00001), loss='categorical_crossentropy', metrics=['accuracy'])\n","#     return model\n","\n","# # Train the model with data augmentation\n","# def train_model(model, X_train, y_train, X_validation, y_validation, batch_size, epochs):\n","#     # Data Augmentation with reduced intensity\n","#     datagen = ImageDataGenerator(\n","#         rescale=1.0/255,\n","#         rotation_range=10,\n","#         width_shift_range=0.1,\n","#         height_shift_range=0.1,\n","#         shear_range=0.1,\n","#         zoom_range=0.1,\n","#         horizontal_flip=True,\n","#         fill_mode='nearest'\n","#     )\n","\n","#     # Improved early stopping and learning rate reduction\n","#     early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n","#     lr_reduction = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, min_lr=1e-6)\n","\n","#     history = model.fit(\n","#         datagen.flow(X_train, y_train, batch_size=batch_size),\n","#         epochs=epochs,\n","#         validation_data=(X_validation, y_validation),\n","#         callbacks=[early_stopping, lr_reduction]\n","#     )\n","\n","#     return history\n","\n","# def predict_and_save_to_excel(model, class_names):\n","#     num_classes = len(class_names)\n","#     results = []\n","\n","#     image_extensions = ('.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff')  # Add other extensions here\n","\n","#     for filename in os.listdir(test_dir):\n","#         if filename.lower().endswith(image_extensions):  # Convert to lowercase to handle uppercase extensions\n","#             img_path = os.path.join(test_dir, filename)\n","#             img = tf.keras.preprocessing.image.load_img(img_path, target_size=imageDimensions[:2])\n","#             img = tf.keras.preprocessing.image.img_to_array(img)\n","#             img = np.expand_dims(img, axis=0)  # Add batch dimension\n","#             img = img / 255.0  # Normalize the image\n","\n","#             predictions = model.predict(img)\n","#             predicted_class = np.argmax(predictions)\n","\n","#             predicted_label = class_names[predicted_class]\n","#             results.append([filename, predicted_label])\n","\n","#     df = pd.DataFrame(results, columns=['Filename', 'Predicted Label'])\n","#     df.to_excel(results_excel_path, index=False)\n","#     print(f'Results saved to {results_excel_path}')\n","\n","# # Evaluate the model\n","# def evaluate_model(model, X_test, y_test):\n","#     num_classes = len(np.unique(y_test))\n","#     y_test_pred = model.predict(X_test)\n","#     y_test_pred_classes = np.argmax(y_test_pred, axis=1)\n","#     y_test_true_classes = np.argmax(y_test, axis=1) if y_test.ndim > 1 else y_test\n","\n","#     # Compute confusion matrix\n","#     cm = confusion_matrix(y_test_true_classes, y_test_pred_classes)\n","\n","#     # Print classification report\n","#     report = classification_report(y_test_true_classes, y_test_pred_classes, zero_division=1)\n","#     print(\"Classification Report:\\n\", report)\n","\n","#     # Plot confusion matrix\n","#     plt.figure(figsize=(10, 7))\n","#     sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=range(num_classes), yticklabels=range(num_classes))\n","#     plt.xlabel('Predicted Label')\n","#     plt.ylabel('True Label')\n","#     plt.title('Confusion Matrix')\n","#     plt.show()\n","\n","#     # Print evaluation metrics\n","#     accuracy = accuracy_score(y_test_true_classes, y_test_pred_classes)\n","#     precision = precision_score(y_test_true_classes, y_test_pred_classes, average='weighted', zero_division=1)\n","#     recall = recall_score(y_test_true_classes, y_test_pred_classes, average='weighted', zero_division=1)\n","#     f1 = f1_score(y_test_true_classes, y_test_pred_classes, average='weighted', zero_division=1)\n","\n","#     print(f'Accuracy: {accuracy:.2f}')\n","#     print(f'Precision: {precision:.2f}')\n","#     print(f'Recall: {recall:.2f}')\n","#     print(f'F1 Score: {f1:.2f}')\n","\n","# # Main code execution\n","# if __name__ == \"__main__\":\n","#     # Load images and labels\n","#     images, labels, class_names = load_images_and_labels(data_dir)\n","#     X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=testRatio, stratify=labels)\n","#     X_train, X_validation, y_train, y_validation = train_test_split(X_train, y_train, test_size=validationRatio, stratify=y_train)\n","\n","#     # One-hot encode labels\n","#     y_train = to_categorical(y_train, len(class_names))\n","#     y_validation = to_categorical(y_validation, len(class_names))\n","#     y_test = to_categorical(y_test, len(class_names))\n","\n","#     # Build and train the model\n","#     model = build_model(num_classes=len(class_names))\n","#     print(\"Model Summary:\")\n","#     try:\n","#         model.summary()\n","#     except Exception as e:\n","#         print(f\"Error in model summary: {e}\")\n","\n","#     history = train_model(model, X_train, y_train, X_validation, y_validation, batch_size=batch_size_val, epochs=epochs_val)\n","\n","#     # Plot training history\n","#     plt.figure()\n","#     plt.plot(history.history['loss'])\n","#     plt.plot(history.history['val_loss'])\n","#     plt.legend(['Training Loss', 'Validation Loss'])\n","#     plt.title('Loss')\n","#     plt.xlabel('Epoch')\n","#     plt.show()\n","\n","#     plt.figure()\n","#     plt.plot(history.history['accuracy'])\n","#     plt.plot(history.history['val_accuracy'])\n","#     plt.legend(['Training Accuracy', 'Validation Accuracy'])\n","#     plt.title('Accuracy')\n","#     plt.xlabel('Epoch')\n","#     plt.show()\n","\n","#     # Evaluate the model\n","#     evaluate_model(model, X_test, y_test)\n","\n","#     # Save the model\n","#     model.save(\"model.keras\")\n","\n","#     # Predict and save results to Excel\n","#     predict_and_save_to_excel(model, class_names)"],"metadata":{"id":"3kPu1LaaDXYa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","from PIL import Image as PILImage, UnidentifiedImageError\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout, Flatten\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.applications import VGG16\n","from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from sklearn.model_selection import train_test_split\n","import pandas as pd\n","import os\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, precision_score, recall_score, f1_score\n","from openpyxl import Workbook\n","from openpyxl.drawing.image import Image as OpenpyxlImage\n","\n","# Define paths\n","data_dir = '/content/drive/MyDrive/Our_Ai_Project/TrainingSet'\n","test_dir = '/content/drive/MyDrive/Our_Ai_Project/TestingSet'\n","results_excel_path = '/content/drive/MyDrive/Our_Ai_Project/results_final_pics.xlsx'\n","temp_images_dir = '/content/drive/MyDrive/Our_Ai_Project/temp_images/'  # Temporary directory for images\n","\n","batch_size_val = 32\n","epochs_val = 50  # Increased number of epochs\n","imageDimensions = (224, 224, 3)  # Dimensions for VGG16\n","testRatio = 0.2\n","validationRatio = 0.2\n","\n","def load_images_and_labels(data_dir):\n","    images = []\n","    labels = []\n","    class_names = os.listdir(data_dir)\n","    class_names.sort()  # Ensure consistent ordering\n","    class_map = {class_name: idx for idx, class_name in enumerate(class_names)}\n","\n","    image_extensions = ['.jpg', '.png', '.jpeg', '.webp', '.bmp', '.tiff']\n","\n","    for class_name, class_idx in class_map.items():\n","        folder_path = os.path.join(data_dir, class_name)\n","        if os.path.isdir(folder_path):\n","            for filename in os.listdir(folder_path):\n","                if any(filename.lower().endswith(ext) for ext in image_extensions):\n","                    img_path = os.path.join(folder_path, filename)\n","                    try:\n","                        img = tf.keras.preprocessing.image.load_img(img_path, target_size=imageDimensions[:2])\n","                        img = tf.keras.preprocessing.image.img_to_array(img)\n","                        images.append(img)\n","                        labels.append(class_idx)\n","                    except (UnidentifiedImageError, IOError) as e:\n","                        print(f\"Warning: Could not load image {img_path}. Error: {e}\")\n","\n","    images = np.array(images)\n","    labels = np.array(labels)\n","    return images, labels, class_names\n","\n","# Model definition with Transfer Learning\n","def build_model(num_classes):\n","    base_model = VGG16(weights='imagenet', include_top=False, input_shape=(imageDimensions[0], imageDimensions[1], 3))\n","    base_model.trainable = True\n","\n","    # Freeze all layers except the top layers\n","    for layer in base_model.layers[:-4]:\n","        layer.trainable = False\n","\n","    model = Sequential([\n","        base_model,\n","        Flatten(),\n","        Dense(512, activation='relu'),\n","        Dropout(0.5),\n","        Dense(num_classes, activation='softmax')\n","    ])\n","\n","    model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])\n","    return model\n","\n","# Train the model with data augmentation\n","def train_model(model, X_train, y_train, X_validation, y_validation, batch_size, epochs):\n","    # Data Augmentation\n","    datagen = ImageDataGenerator(\n","        rescale=1.0/255,\n","        rotation_range=20,\n","        width_shift_range=0.2,\n","        height_shift_range=0.2,\n","        shear_range=0.2,\n","        zoom_range=0.2,\n","        horizontal_flip=True,\n","        fill_mode='nearest'\n","    )\n","\n","    # Early stopping and learning rate reduction\n","    early_stopping = EarlyStopping(monitor='val_accuracy', patience=10, restore_best_weights=True)\n","    lr_reduction = ReduceLROnPlateau(monitor='val_accuracy', factor=0.1, patience=5, min_lr=1e-6)\n","\n","    history = model.fit(\n","        datagen.flow(X_train, y_train, batch_size=batch_size),\n","        epochs=epochs,\n","        validation_data=(X_validation, y_validation),\n","        callbacks=[early_stopping, lr_reduction]\n","    )\n","\n","    return history\n","\n","def predict_and_save_to_excel(model, class_names):\n","    num_classes = len(class_names)\n","    results = []\n","\n","    # Create the temporary images directory if it doesn't exist\n","    if not os.path.exists(temp_images_dir):\n","        os.makedirs(temp_images_dir)\n","\n","    image_extensions = ('.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff')  # Add other extensions here\n","\n","    for filename in os.listdir(test_dir):\n","        if filename.lower().endswith(image_extensions):  # Convert to lowercase to handle uppercase extensions\n","            img_path = os.path.join(test_dir, filename)\n","            img = tf.keras.preprocessing.image.load_img(img_path, target_size=imageDimensions[:2])\n","            img_array = tf.keras.preprocessing.image.img_to_array(img)\n","            img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension\n","            img_array = img_array / 255.0  # Normalize the image\n","\n","            predictions = model.predict(img_array)\n","            predicted_class = np.argmax(predictions)\n","\n","            predicted_label = class_names[predicted_class]\n","\n","            # Save image to temp directory\n","            temp_img_path = os.path.join(temp_images_dir, filename)\n","            PILImage.fromarray((img_array[0] * 255).astype(np.uint8)).save(temp_img_path)\n","\n","            results.append([filename, predicted_label, temp_img_path])\n","\n","    # Create Excel file with images\n","    wb = Workbook()\n","    ws = wb.active\n","    ws.title = \"Predictions\"\n","\n","    # Write headers\n","    ws.append(['Filename', 'Predicted Label', 'Image'])\n","\n","    for result in results:\n","        filename, label, img_path = result\n","        # Add image to Excel\n","        img = OpenpyxlImage(img_path)\n","        img.width = 100\n","        img.height = 100\n","        ws.append([filename, label])\n","        cell = ws.cell(row=ws.max_row, column=3)\n","        ws.add_image(img, cell.coordinate)\n","\n","    wb.save(results_excel_path)\n","    print(f'Results saved to {results_excel_path}')\n","\n","# Evaluate the model\n","def evaluate_model(model, X_test, y_test):\n","    num_classes = len(np.unique(y_test))\n","    y_test_pred = model.predict(X_test)\n","    y_test_pred_classes = np.argmax(y_test_pred, axis=1)\n","    y_test_true_classes = np.argmax(y_test, axis=1) if y_test.ndim > 1 else y_test\n","\n","    # Compute confusion matrix\n","    cm = confusion_matrix(y_test_true_classes, y_test_pred_classes)\n","\n","    # Print classification report\n","    report = classification_report(y_test_true_classes, y_test_pred_classes, zero_division=1)\n","    print(\"Classification Report:\\n\", report)\n","\n","    # Plot confusion matrix\n","    plt.figure(figsize=(10, 7))\n","    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=range(num_classes), yticklabels=range(num_classes))\n","    plt.xlabel('Predicted Label')\n","    plt.ylabel('True Label')\n","    plt.title('Confusion Matrix')\n","    plt.show()\n","\n","    # Print evaluation metrics\n","    accuracy = accuracy_score(y_test_true_classes, y_test_pred_classes)\n","    precision = precision_score(y_test_true_classes, y_test_pred_classes, average='weighted', zero_division=1)\n","    recall = recall_score(y_test_true_classes, y_test_pred_classes, average='weighted', zero_division=1)\n","    f1 = f1_score(y_test_true_classes, y_test_pred_classes, average='weighted', zero_division=1)\n","\n","    print(f'Accuracy: {accuracy:.2f}')\n","    print(f'Precision: {precision:.2f}')\n","    print(f'Recall: {recall:.2f}')\n","    print(f'F1 Score: {f1:.2f}')\n","\n","# Main code execution\n","if __name__ == \"__main__\":\n","    # Load images and labels\n","    images, labels, class_names = load_images_and_labels(data_dir)\n","    X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=testRatio, stratify=labels)\n","    X_train, X_validation, y_train, y_validation = train_test_split(X_train, y_train, test_size=validationRatio, stratify=y_train)\n","\n","    # One-hot encode labels\n","    y_train = to_categorical(y_train, len(class_names))\n","    y_validation = to_categorical(y_validation, len(class_names))\n","    y_test = to_categorical(y_test, len(class_names))\n","\n","    # Build and train the model\n","    model = build_model(num_classes=len(class_names))\n","    print(\"Model Summary:\")\n","    try:\n","        model.summary()\n","    except Exception as e:\n","        print(f\"Error in model summary: {e}\")\n","\n","    history = train_model(model, X_train, y_train, X_validation, y_validation, batch_size=batch_size_val, epochs=epochs_val)\n","\n","    # Plot training history\n","    plt.figure()\n","    plt.plot(history.history['loss'])\n","    plt.plot(history.history['val_loss'])\n","    plt.legend(['Training Loss', 'Validation Loss'])\n","    plt.title('Loss')\n","    plt.xlabel('Epoch')\n","    plt.show()\n","\n","    plt.figure()\n","    plt.plot(history.history['accuracy'])\n","    plt.plot(history.history['val_accuracy'])\n","    plt.legend(['Training Accuracy', 'Validation Accuracy'])\n","    plt.title('Accuracy')\n","    plt.xlabel('Epoch')\n","    plt.show()\n","\n","    # Evaluate the model\n","    evaluate_model(model, X_test, y_test)\n","\n","    # Save the model\n","    model.save(\"model.keras\")\n","\n","    # Predict and save results to Excel\n","    predict_and_save_to_excel(model, class_names)\n"],"metadata":{"id":"RwaNn8qeDaFT"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"mount_file_id":"19eyFpEpsjQZwZi7uo8M5-VNq4LZ8UA7y","authorship_tag":"ABX9TyOM2D1AOLRHtCVoyTkav+fB"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}